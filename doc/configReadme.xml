<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce User Bidirectional Sync</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin, I want to have my users synchronized between two different Salesforce organizations

## Template overview <a name="templateoverview"/>

Let's say we want to keep Salesforce instance *A* synchronized with Salesforce instance *B*. Then, the integration behavior can be summarized just with the following steps:

1. Ask Salesforce *A*:
> *Which changes have there been since the last time I got in touch with you?*

2. For each of the updates fetched in the previous step (1.), ask Salesforce *B*:
> *Does the update received from A should be applied?*

3. If Salesforce answer for the previous question (2.) is *Yes*, then *upsert* (create or update depending each particular case) B with the belonging change

4. Repeat previous steps (1. to 3.) the other way around (using *B* as source instance and *A* as the target one)

 Repeat *ad infinitum*:

5. Ask Salesforce *A*:
> *Which changes have there been since the question I've made in the step 1.?*

And so on...
  
  
The question for recent changes since a certain moment in nothing but a [poll inbound][1] with a [watermark][2] defined.
		</section>
		<section id="considerations">
<![CDATA[
There are a couple of things you should take into account before running this kick:

1. **Users cannot be deleted in SalesForce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** SalesForce's profiles are what define the permissions the user will have for manipulating data and other users. Each SalesForce account has its own profiles. Check out the next section to define a map between Profile Ids (from the source account to the ones in the target account and the other way around).
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*. If you are indeed working with Sandboxes for the same SalesForce account you will need to map the source username to a different one in the target sandbox, for this purpose, please refer to the processor labeled *assign ProfileId and Username to the User*.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ polling.frequency `10000`  
This are the miliseconds (also different time units can be used) that will run between two different checks for updates in Salesforce

+ watermark.default.expression `2014-02-25T11:00:00.000Z`  
This property is an important one, as it configures what should be the start point of the synchronization.The date format accepted in SFDC Query Language is either *YYYY-MM-DDThh:mm:ss+hh:mm* or you can use Constants. [More information about Dates in SFDC][3]

#### SalesForce Connector configuration for company A
+ sfdc.a.username `jorge.drexler@mail.com`
+ sfdc.a.password `Noctiluca123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/32.0`
+ sfdc.a.integration.user.id= `A0ed000BO9T`  

#### SalesForce Connector configuration for company B
+ sfdc.b.username `mariano.cozzi@mail.com`
+ sfdc.b.password `LaRanitaDeLaBicicleta456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.b.url `https://login.salesforce.com/services/Soap/u/32.0`
+ sfdc.b.integration.user.id `A0ed000BO9T`  

SalesForce's profiles are what define the permissions the user will have for manipulating data and other users.
Each SalesForce account has its own profiles.

This should be a map that associates a profile in sfdc A with a profile in sfdc B
for example: ['SOME_PROFILE_IN_A': 'SOME_PROFILE_IN_B', 'ANOTHER_PROFILE_IN_A': 'ANOTHER_PROFILE_IN_B']

+ from.A.to.B.profilesMap `['00e200000015oKF': '00e20000001UzDx']`

This should be a map that associates a profile in sfdc B with a profile in sfdc A
for example: ['SOME_PROFILE_IN_B': 'SOME_PROFILE_IN_A', 'ANOTHER_PROFILE_IN_B': 'ANOTHER_PROFILE_IN_A']

+ from.B.to.A.profilesMap `['00e200000015oKF': '00e20000001UzDx']`

The meaning of the properties above is defined in the second consideration on [the previous section](#afewconsiderations)
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + X + X / 200***

Being ***X*** the number of Users to be synchronized on each run. 

The division by ***200*** is because, by default, Users are gathered in groups of 200 for each Upsert API Call in the commit step. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file should contain every inbound and outbound endpoint of your integration app. It is intented to contain the application API.
In this particular template, this file contains a couple of poll inbound endpoints that query salesforce for updates using watermark as mentioned before.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template (points 2. to 4. described in the [template overview](#templateoverview)). Its main component is a [*Batch job*][8], and it includes *steps* for both executing the synchronization from Salesforce instance A to Salesforce instance B, and the other way around.
]]>
		</section>
	</sections>
</configuration>